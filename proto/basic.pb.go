// Code generated by protoc-gen-go.
// source: proto/basic.proto
// DO NOT EDIT!

/*
Package dCSP is a generated protocol buffer package.

It is generated from these files:
	proto/basic.proto

It has these top-level messages:
	Int32
	Int64
	Uint32
	Uint64
	Float32
	Float64
	String
	Bytes
	Bool
	Signal
*/
package dCSP

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Int32 struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Int32) Reset()                    { *m = Int32{} }
func (m *Int32) String() string            { return proto.CompactTextString(m) }
func (*Int32) ProtoMessage()               {}
func (*Int32) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Int32) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Int64 struct {
	Value int64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Int64) Reset()                    { *m = Int64{} }
func (m *Int64) String() string            { return proto.CompactTextString(m) }
func (*Int64) ProtoMessage()               {}
func (*Int64) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Int64) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Uint32 struct {
	Value uint32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Uint32) Reset()                    { *m = Uint32{} }
func (m *Uint32) String() string            { return proto.CompactTextString(m) }
func (*Uint32) ProtoMessage()               {}
func (*Uint32) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Uint32) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Uint64 struct {
	Value uint64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Uint64) Reset()                    { *m = Uint64{} }
func (m *Uint64) String() string            { return proto.CompactTextString(m) }
func (*Uint64) ProtoMessage()               {}
func (*Uint64) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Uint64) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Float32 struct {
	Value float32 `protobuf:"fixed32,1,opt,name=value" json:"value,omitempty"`
}

func (m *Float32) Reset()                    { *m = Float32{} }
func (m *Float32) String() string            { return proto.CompactTextString(m) }
func (*Float32) ProtoMessage()               {}
func (*Float32) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Float32) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Float64 struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
}

func (m *Float64) Reset()                    { *m = Float64{} }
func (m *Float64) String() string            { return proto.CompactTextString(m) }
func (*Float64) ProtoMessage()               {}
func (*Float64) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Float64) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type String struct {
	Value *String `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *String) Reset()                    { *m = String{} }
func (m *String) String() string            { return proto.CompactTextString(m) }
func (*String) ProtoMessage()               {}
func (*String) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *String) GetValue() *String {
	if m != nil {
		return m.Value
	}
	return nil
}

type Bytes struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Bytes) Reset()                    { *m = Bytes{} }
func (m *Bytes) String() string            { return proto.CompactTextString(m) }
func (*Bytes) ProtoMessage()               {}
func (*Bytes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Bytes) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Bool struct {
	Value bool `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Bool) Reset()                    { *m = Bool{} }
func (m *Bool) String() string            { return proto.CompactTextString(m) }
func (*Bool) ProtoMessage()               {}
func (*Bool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Bool) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Signal struct {
	Value bool `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Signal) Reset()                    { *m = Signal{} }
func (m *Signal) String() string            { return proto.CompactTextString(m) }
func (*Signal) ProtoMessage()               {}
func (*Signal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Signal) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

func init() {
	proto.RegisterType((*Int32)(nil), "dCSP.Int32")
	proto.RegisterType((*Int64)(nil), "dCSP.Int64")
	proto.RegisterType((*Uint32)(nil), "dCSP.Uint32")
	proto.RegisterType((*Uint64)(nil), "dCSP.Uint64")
	proto.RegisterType((*Float32)(nil), "dCSP.Float32")
	proto.RegisterType((*Float64)(nil), "dCSP.Float64")
	proto.RegisterType((*String)(nil), "dCSP.String")
	proto.RegisterType((*Bytes)(nil), "dCSP.Bytes")
	proto.RegisterType((*Bool)(nil), "dCSP.Bool")
	proto.RegisterType((*Signal)(nil), "dCSP.Signal")
}

func init() { proto.RegisterFile("proto/basic.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x4a, 0x2c, 0xce, 0x4c, 0xd6, 0x03, 0xb3, 0x85, 0x58, 0x52, 0x9c, 0x83, 0x03,
	0x94, 0x64, 0xb9, 0x58, 0x3d, 0xf3, 0x4a, 0x8c, 0x8d, 0x84, 0x44, 0xb8, 0x58, 0xcb, 0x12, 0x73,
	0x4a, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x20, 0x1c, 0xa8, 0xb4, 0x99, 0x09, 0xaa,
	0x34, 0x33, 0x4c, 0x5a, 0x8e, 0x8b, 0x2d, 0x34, 0x13, 0x53, 0x3b, 0x2f, 0x9a, 0x3c, 0xba, 0x7e,
	0x16, 0x98, 0xbc, 0x3c, 0x17, 0xbb, 0x5b, 0x4e, 0x7e, 0x22, 0x86, 0x01, 0x4c, 0xe8, 0x0a, 0xd0,
	0x4d, 0x60, 0x84, 0x29, 0xd0, 0xe1, 0x62, 0x0b, 0x2e, 0x29, 0xca, 0xcc, 0x4b, 0x17, 0x52, 0x42,
	0x96, 0xe7, 0x36, 0xe2, 0xd1, 0x03, 0xf9, 0x4f, 0x0f, 0x22, 0x89, 0xe4, 0x1d, 0xa7, 0xca, 0x92,
	0xd4, 0x62, 0x54, 0xc3, 0x78, 0x60, 0xd2, 0x32, 0x5c, 0x2c, 0x4e, 0xf9, 0xf9, 0x39, 0xa8, 0xb2,
	0x1c, 0x48, 0x9e, 0x09, 0xce, 0x4c, 0xcf, 0x4b, 0xc4, 0x21, 0x9f, 0xc4, 0x06, 0x0e, 0x57, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xd4, 0xfc, 0x2f, 0x6c, 0x01, 0x00, 0x00,
}
